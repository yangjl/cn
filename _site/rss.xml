<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Jinliang Yang</title>
        <description>Jinliang Yang - Jinliang Yang</description>
        <link>http://yangjl.me/cn</link>
        <link>http://yangjl.me/cn</link>
        <lastBuildDate>2014-03-07T16:01:42-06:00</lastBuildDate>
        <pubDate>2014-03-07T16:01:42-06:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>大数据时代的玉米遗传组学</title>
                <description>&lt;p&gt;不知不觉进入了大数据时代，连&lt;a href=&quot;http://www.nytimes.com/2013/04/14/education/edlife/universities-offer-courses-in-a-hot-new-field-data-science.html?pagewanted=all&amp;amp;_r=0&quot;&gt;纽约时报&lt;/a&gt;都说“数据分析师将是这个世纪最性感的职业”。IT界常引用的一句话说“单单过去两年产生的数据，就占到这个世界数据总产量的90%”，就此，你可以想象，这个数据爆炸的猛。&lt;/p&gt;

&lt;p&gt;为了玉米大会上的报告，稍微读了一下&lt;a href=&quot;http://www.ncbi.nlm.nih.gov/sra&quot;&gt;NCBI SRA&lt;/a&gt;的report。不看不知道，一看吓一跳，危机感立马爆棚。在过去几年，NGS技术单单在玉米基因组领域，就生产了13,000 Giga 碱基对的数据。玉米基因组大约2000 Mb，简单来算的话，在B73物理图谱完成的短短五年时间里，基因组数据产量居然已经达到了6,000多倍的覆盖率。这还不包括正在测的，和各种藏着掖着没发布的数据。把视野扩展一下，看看整个数据库，玉米数据，不过占到&lt;a href=&quot;http://www.ncbi.nlm.nih.gov/Traces/sra/?view=announcement&quot;&gt;SRA数据库&lt;/a&gt;聊聊的0.1%不到。截止于2014二月底，&gt;2300 Tera的碱基对上传到了这个数据库。看下面的图，“&gt;90%的数据生产于这两年”的规律也完全适用于测序产业。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Mb5Z1Yi.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;于是乎，NGS数据的存储，发布和分享，成了世界性的课题。现在，150多个科研组织和企业，成立了&lt;a href=&quot;http://genomicsandhealth.org/&quot;&gt;全球基因组与健康联盟 (Global Alliance for Genomics and Health)&lt;/a&gt;，用于讨论数据共享的行为准则。其中最受瞩目的，是&lt;a href=&quot;http://googleresearch.blogspot.co.uk/2014/02/google-joins-global-alliance-for.html&quot;&gt;Google Genomics&lt;/a&gt;的加入。看来遗传组学，不再是遗传学者的玩具了，IT业者也要进来参一脚了。当然，这样说其实也太把自己当回事了，实际上，这是医学和人类生物学者的玩具，人家是不屑于带我们这些小众科研群体玩的。不知道在这个过程中，中国的IT业者们有没有先知先觉，尤其是那些做云端的公司们。不要总是等人家瓜熟蒂落了再紧跟着山寨。先人一步，也许就成了规则的领导者。当然，加入联盟也好，科学无国界嘛。战略层面的咱暂且不表，对我辈矮穷挫的生物男来说，利好消息是，一不小心，也可能挨着高大上的IT男工作了，岂不快哉。&lt;/p&gt;

&lt;p&gt;闲话不说，下面解读一下玉米基因测序背后的故事。看数据，比读文章有意思多了。下表，列了按数据产量排名的10大projects。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Top 10 projects （按产量排名。个人整理，有错轻拍&lt;a href=&quot;/data/SRA_maize_030614.csv&quot;&gt;全表下载&lt;/a&gt;）&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Center&lt;/strong&gt; &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; &lt;strong&gt;Size (Gb)&lt;/strong&gt; &lt;/th&gt;
&lt;th&gt; &lt;strong&gt;Summary&lt;/strong&gt; &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;CAAS         &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;2426        &lt;/td&gt;
&lt;td&gt;transcriptome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;MSU-BUELL    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;1247      &lt;/td&gt;
&lt;td&gt;Pan Transcriptome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;CAU          &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;1224      &lt;/td&gt;
&lt;td&gt;Genome Re-sequencing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;CSHL         &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;964       &lt;/td&gt;
&lt;td&gt;Maize HapMap II  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Academia Sinica&lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;626     &lt;/td&gt;
&lt;td&gt;Transcriptome of maize embryonic leaves &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;University of Minnesota&lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;619&lt;/td&gt;
&lt;td&gt;Transcriptome of IBM RILs &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;CSHL          &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;572&lt;/td&gt;
&lt;td&gt;Methylome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;ISU           &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;512          &lt;/td&gt;
&lt;td&gt;Zeanome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Cornell University&lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;493&lt;/td&gt;
&lt;td&gt;Breeding efforts in Africa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;MSU-BUELL&lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;450&lt;/td&gt;
&lt;td&gt;Gene Expression of vitamin biosynthesis&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;hr /&gt;

&lt;p&gt;玉米的测序格局，也许正是传统玉米研究的分水岭，新的科研格局可能正在经历重新洗牌。可喜的是，中国的团队在这个领域，不但占有了一席之地。而且，可能是两席或多席。CAAS和CAU，包括华中农大，测起序来毫不手软。竞争合作，多有南北鼎足之势。当然也看到北大，山东农大，四川农大的崛起。当这样的团队数达到几十个的时候，玉米遗传学研究就真正到了中美G2的时代了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/01JWlMz.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面这个图，是玉米基因组测序的几个里程碑式进展。随着这些进展，总体数据量正在一个台阶一个台阶的跃进。在这个测序大战中，MSU异军突起，有要扛起代谢组大旗的意思。UM和CSHL的甲基化组，ISU的Zeanome和PAV，UC Davis的进化，各有特长，各有侧重。Cornell的GBS，接近于要测地球上所有的玉米物种。JGI看不太懂，有点钱多人傻的意思。&lt;/p&gt;

&lt;p&gt;测是测，分析才是关键。大数据分析，不是请客吃饭。理论啊，算法啊，时时都在经历革新。那些实验经验丰富，但是没有阅读和把握数据，尤其是Raw数据的教授们，将会在竞争中处于不利地位。对分析人员来说，借鉴不同的知识体系，如统计的各种检验，计算科学的&lt;a href=&quot;http://en.wikipedia.org/wiki/Machine_learning&quot;&gt;Machine Learning&lt;/a&gt;，甚至并行运算的&lt;a href=&quot;http://hadoop.apache.org/&quot;&gt;Hadoop&lt;/a&gt;，再加上美观的可视化，才是制胜的关键。遗传学教育，也在经历变革，以后的学生，不但按得一手好枪头，还得写的一手好程序。以后，如果你每天不在&lt;a href=&quot;https://github.com/&quot;&gt;github&lt;/a&gt;上推几行&lt;a href=&quot;http://www.python.org/&quot;&gt;Python&lt;/a&gt;，&lt;a href=&quot;http://www.r-project.org/&quot;&gt;R&lt;/a&gt;或者&lt;a href=&quot;http://www.perl.org/&quot;&gt;Perl&lt;/a&gt;的程序，都不好意思在社交网络上跟人家打招呼。呵呵。&lt;/p&gt;

&lt;p&gt;大数据时代，你准备好了吗？&lt;/p&gt;
</description>
                <link>http://yangjl.me/cn/%E5%AD%A6%E6%9C%AF%E5%8D%9A/2014/03/07/NGS-maize</link>
                <guid>http://yangjl.me/cn/%E5%AD%A6%E6%9C%AF%E5%8D%9A/2014/03/07/NGS-maize</guid>
                <pubDate>2014-03-07T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>Deleterious Mutation Load</title>
                <description>&lt;p&gt;在NGS时代，群体遗传学以及进化的光芒基本全部被铺天盖地的织袜子（关联分析，俗称GWAS，属数量遗传学）掩盖了。
过去，那些方向是纯脑力劳动，年富力强的教授副教授们，啪啪啪啪，就能天马行空的整出文章来。看的人云里雾里。
碍于历史和数据的局限，很多理论也无法证伪，只能争论争论作罢。&lt;/p&gt;

&lt;p&gt;NGS生产了天量的数据。现在的问题是，这波浪潮还没有完全席卷那些传统领域。或者至少有一定的时间差。这个时间差，
导致群体或进化遗传学的大家们没有能力分析这些数据。尽管空有满腹的猜想，奈何撼动不了这些数据。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Simons, Y. B., Turchin, M. C., Pritchard, J. K., &amp;amp; Sella, G. (2014). The deleterious \
mutation load is insensitive to recent population history. Nature Genetics,\
(August 2013). doi:10.1038/ng.2896
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，也有聪明绝顶的，如上面这篇NG文章的作者们（希望没有绝顶）。作者在猜想，模拟，验证中，部分解决了两个蛮
有意思的问题。&lt;/p&gt;
</description>
                <link>http://yangjl.me/cn/jc/2014/02/19/Journal-Club-1</link>
                <guid>http://yangjl.me/cn/jc/2014/02/19/Journal-Club-1</guid>
                <pubDate>2014-02-19T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>hello world</title>
                <description>
</description>
                <link>http://yangjl.me/cn/2013/11/05/hello-world</link>
                <guid>http://yangjl.me/cn/2013/11/05/hello-world</guid>
                <pubDate>2013-11-05T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>Jekyll Introduction</title>
                <description>&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we&#39;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;h3&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &quot;a simple, blog aware, static site generator&quot;.&lt;/p&gt;

&lt;h3&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
&lt;li&gt;No internet connection required.&lt;/li&gt;
&lt;li&gt;Ability to publish via git.&lt;/li&gt;
&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you&#39;ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br/&gt;
  Stores configuration data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br/&gt;
  This folder is for partial views.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; &lt;br/&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br/&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br/&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br/&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content &quot;objects&quot; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; &lt;br/&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br/&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br/&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; &lt;br/&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post&#39;s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; &lt;br/&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy &quot;set&quot;.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &quot;lessons/beginner&quot;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won&#39;t find &quot;lessons&quot; and &quot;beginner&quot; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br/&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br/&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br/&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br/&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br/&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br/&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br/&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br/&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&#39;s or post&#39;s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br/&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br/&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site&#39;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br/&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;p&gt;  &lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;h3&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another &quot;root&quot; layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can&#39;t do jackshit in liquid that hasn&#39;t been allowed explicitly by the implementation.
What&#39;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&#39;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; &lt;br/&gt;
My personal stance is to not invest time trying to hack liquid. It&#39;s really unnecessary
&lt;em&gt;from a programmer&#39;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I&#39;ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; &lt;br/&gt;
  This is done with textile or markdown.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; &lt;br/&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br/&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;  &lt;br/&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; &lt;br/&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&#39;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you&#39;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&#39;s job is to generate a static representation of your website.
The following is an outline of how that&#39;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; &lt;br/&gt;
Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; &lt;br/&gt;
Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
At this stage your site is one big computed ruby object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br/&gt;
Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &quot;liquified&quot;. &lt;br/&gt;
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; &lt;br/&gt;
 Finally the liquid templates are &quot;rendered&quot;, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br/&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&#39;ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you&#39;d like.&lt;/p&gt;
</description>
                <link>http://yangjl.me/cn/lessons/2011/12/29/jekyll-introduction</link>
                <guid>http://yangjl.me/cn/lessons/2011/12/29/jekyll-introduction</guid>
                <pubDate>2011-12-29T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>新年飞行</title>
                <description>&lt;p&gt;2010年，从新年伊始，准确的说是新年前夜开始，启动这次三角飞行。一不小心升成了头等舱，于是义不容辞的被度了两周假。我知道那里有阳光沙滩美女和椰子树，但不曾想也经历了醉鬼骗子变态加流浪汉。所以，天堂和地狱，也许只隔一扇门。&lt;/p&gt;

&lt;p&gt;飞行路线是这样的：埃姆斯|得梅因-丹佛-夏威夷；夏威夷-洛杉矶-圣地亚哥；圣地亚哥-圣保罗-得梅因|埃姆斯。两周，很晕。绕了半个美国，经历了天寒地冻和春暖花开。几多感受，但是淡定了很多。也会和别人说，但是全然不是兴高采烈的分享旅行感受。而是把自己经历的糗事大爆一下，供众人一乐。在Ames的娱乐圈里，我俨然已经成为娱乐大家的谐星或丑角了。真是杯具。&lt;/p&gt;

&lt;p&gt;夏威夷之行，是去采叶子，提DNA的，所以也算是公费旅游了。住在山上，火山喷发的那种山。圆环型的。土是红褐色的。很肥沃。房子虽然不面朝大海，但是春暖花开，火鸡和无名鸟就在院子里的草坪和树梢上，晒太阳。海就在隔壁过去的一转弯，轰轰轰轰的冲击着岩石和沙滩。每天早晨早早的迎着薄雾就开车下山，山路虽然弯曲，但是路的等级很高，所以开起来还好。当然，也不是我在开。公路一边是太阳升起在雄壮的环形火山旁，公路另一边是朝霞闪烁在泛泛鳞光的海涛里。我们就独自开着车，放着音乐，沉浸在刚才还没做完的梦里。我不知道这算不算幸福。&lt;/p&gt;

&lt;p&gt;中午去小镇里买一个三明治，footlong的。切两半，中午吃半个，晚上吃半个。两三点收工，就去海边沙滩上晒太阳，看别人冲浪。也看那些坐在自己海边大House的富人们，无聊地眺望远方。我不喜欢这种生活。于是开始想念在埃姆斯那些忙忙碌碌的日子。&lt;/p&gt;

&lt;h4&gt;&lt;i class=&quot;icon-folder-open&quot;&gt;&lt;/i&gt;一些旅行的相片：&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/wfcl48O.ipg&quot; alt=&quot;alt text&quot; /&gt;
                                晒太阳的大脚&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/DLNk6QA.jpg&quot; alt=&quot;alt text&quot; /&gt;
                                海边的秋千&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/tdsUwWa.jpg&quot; alt=&quot;alt text&quot; /&gt;
                                去冲浪的美女&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/1iceQDl.jpg&quot; alt=&quot;alt text&quot; /&gt;
                                椰子树边的大房子&lt;/p&gt;
</description>
                <link>http://yangjl.me/cn/%E6%9C%89%E6%97%B6%E8%B5%B0%E8%B5%B0/2010/01/24/new-year-trip</link>
                <guid>http://yangjl.me/cn/%E6%9C%89%E6%97%B6%E8%B5%B0%E8%B5%B0/2010/01/24/new-year-trip</guid>
                <pubDate>2010-01-24T00:00:00-06:00</pubDate>
        </item>

        <item>
                <title>高速惊魂未定</title>
                <description>&lt;p&gt;心有余悸啊，心有余悸。&lt;/p&gt;

&lt;p&gt;今天去了趟省城边的那个遥远的村串亲戚。&lt;/p&gt;

&lt;p&gt;其实也不遥远。半个小时的车程。&lt;/p&gt;

&lt;p&gt;去的时候做了蛮多功课，认认真真的查地图，打印。结果，还是低估自己的路痴指数。&lt;/p&gt;

&lt;p&gt;回来的时候本以为跟着Yan的车，一路狂奔就回来了。结果没想到啊，没想到。我的小命差点断送在这条并不漫长的乡间小高速公路上。&lt;/p&gt;

&lt;p&gt;开始还好。一路跟着。&lt;/p&gt;

&lt;p&gt;要转高速I35的时候，一辆车夹在了我们中间。Yan换Lane我没看见，打左转灯我也没看见。转弯我倒是华丽丽的看见了。但是挥一挥手，只能眼巴巴的越行越远。
我那个恨哪。我把车趴到高速的马路牙子上。欲哭无泪了我。就TM几十米。越过去就是康庄大道。当时我纠结的恨不得逆行，拐回去。
现在想想，我要是真那么做了，明天新闻就是Iowa连环撞车案了。
定了定情绪。我闷头往前开吧。下一个出口拐回来就好。
这下一个出口可不要紧。一猛子十几mile下去了。俩词，一个是黑暗，一个是迷惘。
PS：我从来没在高速上开过没有目的地的车，而且一个人，而且晚上，而且还下雨。诚实点，偶老兄只开过两次高速呢~ 这第三次就迷路了。
当时很不清醒，不知道怎么开了。并线也没看后镜。结果一辆恶凶凶的18轮呼啸而来，与我擦肩而过，只把我逼到了隔离带，差点没开进沟里。我可以想象18轮司机的手势。但是当时顾不了那么多了。小命要紧。
不行了，赶紧找个人家问问路吧。
前面有灯。给了一线光明。
出口呢，出口呢。
看见了，在我身后。我靠。
接着往前。路啊路，这如同Pat实验室毕业时间一样漫长的路~
我滴个神唉。不会开到加拿大吧。我带护照了吗我~
左拐，下高速。
我滴个二郎神唉。这是虾米地方。黑糊糊荒草丛生的，不会有劫匪吧。太冲动了，怎么见出口就下呀。赶紧找个小路掉头。另一个方向重回高速。
还是冲那个有灯的地方。我睁大眼睛找出口。
出高速后终于找到人家了。是家加油站。
我说哥哥姐姐，叔叔阿姨，我是一把鼻涕一把泪，俺住在Ames，可却迷失在这前不着村，后不着店的鬼地方，这可咋整啊。
有个大叔很客气，My friend你别着急，听哥跟你慢慢说。结果连比带画的给我整了张地图。本来我是想问，哥想买个GPS，哪有卖的。结果，为了在美国民工面前争口气。我说哥懂了。不就是先拐个大圈，然后上35嘛。我说小case,Thanks。然后轻轻的我扬长而去，不留下一片云彩~
等等，ATM。这下爷不怕了，我看谁TM还敢抢劫我。谁敢抢劫，我给谁100块钱。赶紧在ATM取了一百块钱。还要手续费，真是趁火打劫~
事实证明还是太冲动。为什么就不肯承认自己是路痴的现实呢。当那个360度的大转弯在我隔壁的那条Lane上滑向远方的时候，我只能发呆和轻叹。上帝啊，为什么您老人家老是戏弄我，您饶了我，我初一十五的给您上香还不成吗。我那个恨啊:-(
开啊开，开啊开。转回来。又开啊开，开啊开。
爷这会谁的话也不听了，爷就想买个GPS。
有灯的地方。那是卖火柴小姑娘——他哥的港湾。
过了一个个汽车旅馆和洗手间。终于找到家卖电器的港湾。
赶紧花了100块钱买个GPS。我那个亲切啊我。我想输入北京输入北京，我想输入台北我输入台北。别得意了，老实的输入Ames回家吧。
当华丽丽的指向箭头呈现出来的时候。我差点没激动地热泪盈眶。抚摸着强大的GPS，我轻轻地说，哥再也不抛弃你了。真的~
然后，开着冷气和低缓的乡村音乐。
一路向北。&lt;/p&gt;
</description>
                <link>http://yangjl.me/cn/%E6%9C%89%E6%97%B6%E8%B5%B0%E8%B5%B0/2009/08/16/high-way-danger</link>
                <guid>http://yangjl.me/cn/%E6%9C%89%E6%97%B6%E8%B5%B0%E8%B5%B0/2009/08/16/high-way-danger</guid>
                <pubDate>2009-08-16T00:00:00-05:00</pubDate>
        </item>

        <item>
                <title>诗性大发啊~</title>
                <description>&lt;p&gt;俺是种田的，
扛着锄头，一觉能睡到天黑，
懒得说自己很懒，
倘若能笑笑，日子也是不难打发的~&lt;/p&gt;

&lt;p&gt;俺是忧郁的，
庄稼人的惆怅，
是低眉信手，断了线的瓜藤，
和路边迷醉了的看花人的痴意~&lt;/p&gt;

&lt;p&gt;泯口酒，抽袋烟，
就当自己是个有钱人。
倘若能多打几筐玉米，
明年就养头猪。&lt;/p&gt;
</description>
                <link>http://yangjl.me/cn/%E6%9C%89%E6%97%B6%E5%81%9C%E5%81%9C/2009/08/11/country-poetry</link>
                <guid>http://yangjl.me/cn/%E6%9C%89%E6%97%B6%E5%81%9C%E5%81%9C/2009/08/11/country-poetry</guid>
                <pubDate>2009-08-11T00:00:00-05:00</pubDate>
        </item>


</channel>
</rss>
